{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fkURxmnC4CfZkGLlvo562MHPCbHpjTcd","timestamp":1733136177889},{"file_id":"1lcwBjFIQFVBUG3t_NqVMtOO1cd2T58Mx","timestamp":1732887401956},{"file_id":"1GUjIlJG3CsaJoqPTwpnnv6jh5xfcDuMR","timestamp":1732868782454},{"file_id":"1rBqqkevA_mwniNCISLe8j7xnJFbCffuM","timestamp":1732790159097},{"file_id":"1iaxaLcNiOA4c25PXUIjR8S_SpTJM3eqW","timestamp":1732719932792}],"toc_visible":true,"authorship_tag":"ABX9TyPV3h6eyd2vg6pilVHKR4t7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["---\n","## 1.&nbsp; Import libraries and files ðŸ’¾"],"metadata":{"id":"nmbpYUbyyLck"}},{"cell_type":"code","execution_count":34,"metadata":{"id":"DwOALkTYtQbM","executionInfo":{"status":"ok","timestamp":1733218571409,"user_tz":-60,"elapsed":168,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}}},"outputs":[],"source":["#!pip install matplotlib seaborn\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["#download csv\n","url = \"https://drive.google.com/file/d/1ajzEaA9cN7tJCPmk4gxOmvl5c3b849Nn/view?usp=sharing\"\n","path = \"https://drive.google.com/uc?export=download&id=\"+url.split(\"/\")[-2]\n","data= pd.read_csv(path)"],"metadata":{"id":"r-XQHPiyyANH","executionInfo":{"status":"ok","timestamp":1733218573957,"user_tz":-60,"elapsed":2385,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}}},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":["MSSubClass: Identifies the type of dwelling involved in the sale.\n","\n","        20\t1-STORY 1946 & NEWER ALL STYLES\n","        30\t1-STORY 1945 & OLDER\n","        40\t1-STORY W/FINISHED ATTIC ALL AGES\n","        45\t1-1/2 STORY - UNFINISHED ALL AGES\n","        50\t1-1/2 STORY FINISHED ALL AGES\n","        60\t2-STORY 1946 & NEWER\n","        70\t2-STORY 1945 & OLDER\n","        75\t2-1/2 STORY ALL AGES\n","        80\tSPLIT OR MULTI-LEVEL\n","        85\tSPLIT FOYER\n","        90\tDUPLEX - ALL STYLES AND AGES\n","       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n","       150\t1-1/2 STORY PUD - ALL AGES\n","       160\t2-STORY PUD - 1946 & NEWER\n","       180\tPUD - MULTILEVEL - INCL SPLIT LEV/FOYER\n","       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n","\n","MSZoning: Identifies the general zoning classification of the sale.\n","\n","       A\tAgriculture\n","       C\tCommercial\n","       FV\tFloating Village Residential\n","       I\tIndustrial\n","       RH\tResidential High Density\n","       RL\tResidential Low Density\n","       RP\tResidential Low Density Park\n","       RM\tResidential Medium Density\n","\n","LotFrontage: Linear feet of street connected to property\n","\n","LotArea: Lot size in square feet\n","\n","Street: Type of road access to property\n","\n","       Grvl\tGravel\n","       Pave\tPaved\n","\n","Alley: Type of alley access to property\n","\n","       Grvl\tGravel\n","       Pave\tPaved\n","       NA \tNo alley access\n","\n","LotShape: General shape of property\n","\n","       Reg\tRegular\n","       IR1\tSlightly irregular\n","       IR2\tModerately Irregular\n","       IR3\tIrregular\n","       \n","LandContour: Flatness of the property\n","\n","       Lvl\tNear Flat/Level\n","       Bnk\tBanked - Quick and significant rise from street grade to building\n","       HLS\tHillside - Significant slope from side to side\n","       Low\tDepression\n","\n","Utilities: Type of utilities available\n","\n","       AllPub\tAll public Utilities (E,G,W,& S)\n","       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n","       NoSeWa\tElectricity and Gas Only\n","       ELO\tElectricity only\n","\n","LotConfig: Lot configuration\n","\n","       Inside\tInside lot\n","       Corner\tCorner lot\n","       CulDSac\tCul-de-sac\n","       FR2\tFrontage on 2 sides of property\n","       FR3\tFrontage on 3 sides of property\n","\n","LandSlope: Slope of property\n","\n","       Gtl\tGentle slope\n","       Mod\tModerate Slope\n","       Sev\tSevere Slope\n","\n","Neighborhood: Physical locations within Ames city limits\n","\n","       Blmngtn\tBloomington Heights\n","       Blueste\tBluestem\n","       BrDale\tBriardale\n","       BrkSide\tBrookside\n","       ClearCr\tClear Creek\n","       CollgCr\tCollege Creek\n","       Crawfor\tCrawford\n","       Edwards\tEdwards\n","       Gilbert\tGilbert\n","       IDOTRR\tIowa DOT and Rail Road\n","       MeadowV\tMeadow Village\n","       Mitchel\tMitchell\n","       Names\tNorth Ames\n","       NoRidge\tNorthridge\n","       NPkVill\tNorthpark Villa\n","       NridgHt\tNorthridge Heights\n","       NWAmes\tNorthwest Ames\n","       OldTown\tOld Town\n","       SWISU\tSouth & West of Iowa State University\n","       Sawyer\tSawyer\n","       SawyerW\tSawyer West\n","       Somerst\tSomerset\n","       StoneBr\tStone Brook\n","       Timber\tTimberland\n","       Veenker\tVeenker\n","\n","Condition1: Proximity to various conditions\n","\n","       Artery\tAdjacent to arterial street\n","       Feedr\tAdjacent to feeder street\n","       Norm\tNormal\n","       RRNn\tWithin 200' of North-South Railroad\n","       RRAn\tAdjacent to North-South Railroad\n","       PosN\tNear positive off-site feature--park, greenbelt, etc.\n","       PosA\tAdjacent to postive off-site feature\n","       RRNe\tWithin 200' of East-West Railroad\n","       RRAe\tAdjacent to East-West Railroad\n","\n","Condition2: Proximity to various conditions (if more than one is present)\n","\n","       Artery\tAdjacent to arterial street\n","       Feedr\tAdjacent to feeder street\n","       Norm\tNormal\n","       RRNn\tWithin 200' of North-South Railroad\n","       RRAn\tAdjacent to North-South Railroad\n","       PosN\tNear positive off-site feature--park, greenbelt, etc.\n","       PosA\tAdjacent to postive off-site feature\n","       RRNe\tWithin 200' of East-West Railroad\n","       RRAe\tAdjacent to East-West Railroad\n","\n","BldgType: Type of dwelling\n","\n","       1Fam\tSingle-family Detached\n","       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n","       Duplx\tDuplex\n","       TwnhsE\tTownhouse End Unit\n","       TwnhsI\tTownhouse Inside Unit\n","\n","HouseStyle: Style of dwelling\n","\n","       1Story\tOne story\n","       1.5Fin\tOne and one-half story: 2nd level finished\n","       1.5Unf\tOne and one-half story: 2nd level unfinished\n","       2Story\tTwo story\n","       2.5Fin\tTwo and one-half story: 2nd level finished\n","       2.5Unf\tTwo and one-half story: 2nd level unfinished\n","       SFoyer\tSplit Foyer\n","       SLvl\tSplit Level\n","\n","OverallQual: Rates the overall material and finish of the house\n","\n","       10\tVery Excellent\n","       9\tExcellent\n","       8\tVery Good\n","       7\tGood\n","       6\tAbove Average\n","       5\tAverage\n","       4\tBelow Average\n","       3\tFair\n","       2\tPoor\n","       1\tVery Poor\n","\n","OverallCond: Rates the overall condition of the house\n","\n","       10\tVery Excellent\n","       9\tExcellent\n","       8\tVery Good\n","       7\tGood\n","       6\tAbove Average\n","       5\tAverage\n","       4\tBelow Average\n","       3\tFair\n","       2\tPoor\n","       1\tVery Poor\n","\n","YearBuilt: Original construction date\n","\n","YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n","\n","RoofStyle: Type of roof\n","\n","       Flat\tFlat\n","       Gable\tGable\n","       Gambrel\tGabrel (Barn)\n","       Hip\tHip\n","       Mansard\tMansard\n","       Shed\tShed\n","\n","RoofMatl: Roof material\n","\n","       ClyTile\tClay or Tile\n","       CompShg\tStandard (Composite) Shingle\n","       Membran\tMembrane\n","       Metal\tMetal\n","       Roll\tRoll\n","       Tar&Grv\tGravel & Tar\n","       WdShake\tWood Shakes\n","       WdShngl\tWood Shingles\n","\n","Exterior1st: Exterior covering on house\n","\n","       AsbShng\tAsbestos Shingles\n","       AsphShn\tAsphalt Shingles\n","       BrkComm\tBrick Common\n","       BrkFace\tBrick Face\n","       CBlock\tCinder Block\n","       CemntBd\tCement Board\n","       HdBoard\tHard Board\n","       ImStucc\tImitation Stucco\n","       MetalSd\tMetal Siding\n","       Other\tOther\n","       Plywood\tPlywood\n","       PreCast\tPreCast\n","       Stone\tStone\n","       Stucco\tStucco\n","       VinylSd\tVinyl Siding\n","       Wd Sdng\tWood Siding\n","       WdShing\tWood Shingles\n","\n","Exterior2nd: Exterior covering on house (if more than one material)\n","\n","       AsbShng\tAsbestos Shingles\n","       AsphShn\tAsphalt Shingles\n","       BrkComm\tBrick Common\n","       BrkFace\tBrick Face\n","       CBlock\tCinder Block\n","       CemntBd\tCement Board\n","       HdBoard\tHard Board\n","       ImStucc\tImitation Stucco\n","       MetalSd\tMetal Siding\n","       Other\tOther\n","       Plywood\tPlywood\n","       PreCast\tPreCast\n","       Stone\tStone\n","       Stucco\tStucco\n","       VinylSd\tVinyl Siding\n","       Wd Sdng\tWood Siding\n","       WdShing\tWood Shingles\n","\n","MasVnrType: Masonry veneer type\n","\n","       BrkCmn\tBrick Common\n","       BrkFace\tBrick Face\n","       CBlock\tCinder Block\n","       None\tNone\n","       Stone\tStone\n","\n","MasVnrArea: Masonry veneer area in square feet\n","\n","ExterQual: Evaluates the quality of the material on the exterior\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tAverage/Typical\n","       Fa\tFair\n","       Po\tPoor\n","\n","ExterCond: Evaluates the present condition of the material on the exterior\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tAverage/Typical\n","       Fa\tFair\n","       Po\tPoor\n","\n","Foundation: Type of foundation\n","\n","       BrkTil\tBrick & Tile\n","       CBlock\tCinder Block\n","       PConc\tPoured Contrete\n","       Slab\tSlab\n","       Stone\tStone\n","       Wood\tWood\n","\n","BsmtQual: Evaluates the height of the basement\n","\n","       Ex\tExcellent (100+ inches)\n","       Gd\tGood (90-99 inches)\n","       TA\tTypical (80-89 inches)\n","       Fa\tFair (70-79 inches)\n","       Po\tPoor (<70 inches\n","       NA\tNo Basement\n","\n","BsmtCond: Evaluates the general condition of the basement\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tTypical - slight dampness allowed\n","       Fa\tFair - dampness or some cracking or settling\n","       Po\tPoor - Severe cracking, settling, or wetness\n","       NA\tNo Basement\n","\n","BsmtExposure: Refers to walkout or garden level walls\n","\n","       Gd\tGood Exposure\n","       Av\tAverage Exposure (split levels or foyers typically score average or above)\n","       Mn\tMimimum Exposure\n","       No\tNo Exposure\n","       NA\tNo Basement\n","\n","BsmtFinType1: Rating of basement finished area\n","\n","       GLQ\tGood Living Quarters\n","       ALQ\tAverage Living Quarters\n","       BLQ\tBelow Average Living Quarters\n","       Rec\tAverage Rec Room\n","       LwQ\tLow Quality\n","       Unf\tUnfinshed\n","       NA\tNo Basement\n","\n","BsmtFinSF1: Type 1 finished square feet\n","\n","BsmtFinType2: Rating of basement finished area (if multiple types)\n","\n","       GLQ\tGood Living Quarters\n","       ALQ\tAverage Living Quarters\n","       BLQ\tBelow Average Living Quarters\n","       Rec\tAverage Rec Room\n","       LwQ\tLow Quality\n","       Unf\tUnfinshed\n","       NA\tNo Basement\n","\n","BsmtFinSF2: Type 2 finished square feet\n","\n","BsmtUnfSF: Unfinished square feet of basement area\n","\n","TotalBsmtSF: Total square feet of basement area\n","\n","Heating: Type of heating\n","\n","       Floor\tFloor Furnace\n","       GasA\tGas forced warm air furnace\n","       GasW\tGas hot water or steam heat\n","       Grav\tGravity furnace\n","       OthW\tHot water or steam heat other than gas\n","       Wall\tWall furnace\n","\n","HeatingQC: Heating quality and condition\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tAverage/Typical\n","       Fa\tFair\n","       Po\tPoor\n","\n","CentralAir: Central air conditioning\n","\n","       N\tNo\n","       Y\tYes\n","\n","Electrical: Electrical system\n","\n","       SBrkr\tStandard Circuit Breakers & Romex\n","       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\n","       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n","       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n","       Mix\tMixed\n","\n","1stFlrSF: First Floor square feet\n","\n","2ndFlrSF: Second floor square feet\n","\n","LowQualFinSF: Low quality finished square feet (all floors)\n","\n","GrLivArea: Above grade (ground) living area square feet\n","\n","BsmtFullBath: Basement full bathrooms\n","\n","BsmtHalfBath: Basement half bathrooms\n","\n","FullBath: Full bathrooms above grade\n","\n","HalfBath: Half baths above grade\n","\n","BedroomAbvGr: Bedrooms above grade (does NOT include basement bedrooms)\n","\n","KitchenAbvGr: Kitchens above grade\n","\n","KitchenQual: Kitchen quality\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tTypical/Average\n","       Fa\tFair\n","       Po\tPoor\n","\n","TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n","\n","Functional: Home functionality (Assume typical unless deductions are warranted)\n","\n","       Typ\tTypical Functionality\n","       Min1\tMinor Deductions 1\n","       Min2\tMinor Deductions 2\n","       Mod\tModerate Deductions\n","       Maj1\tMajor Deductions 1\n","       Maj2\tMajor Deductions 2\n","       Sev\tSeverely Damaged\n","       Sal\tSalvage only\n","\n","Fireplaces: Number of fireplaces\n","\n","FireplaceQu: Fireplace quality\n","\n","       Ex\tExcellent - Exceptional Masonry Fireplace\n","       Gd\tGood - Masonry Fireplace in main level\n","       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n","       Fa\tFair - Prefabricated Fireplace in basement\n","       Po\tPoor - Ben Franklin Stove\n","       NA\tNo Fireplace\n","\n","GarageType: Garage location\n","\n","       2Types\tMore than one type of garage\n","       Attchd\tAttached to home\n","       Basment\tBasement Garage\n","       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n","       CarPort\tCar Port\n","       Detchd\tDetached from home\n","       NA\tNo Garage\n","\n","GarageYrBlt: Year garage was built\n","\n","GarageFinish: Interior finish of the garage\n","\n","       Fin\tFinished\n","       RFn\tRough Finished\n","       Unf\tUnfinished\n","       NA\tNo Garage\n","\n","GarageCars: Size of garage in car capacity\n","\n","GarageArea: Size of garage in square feet\n","\n","GarageQual: Garage quality\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tTypical/Average\n","       Fa\tFair\n","       Po\tPoor\n","       NA\tNo Garage\n","\n","GarageCond: Garage condition\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tTypical/Average\n","       Fa\tFair\n","       Po\tPoor\n","       NA\tNo Garage\n","\n","PavedDrive: Paved driveway\n","\n","       Y\tPaved\n","       P\tPartial Pavement\n","       N\tDirt/Gravel\n","\n","WoodDeckSF: Wood deck area in square feet\n","\n","OpenPorchSF: Open porch area in square feet\n","\n","EnclosedPorch: Enclosed porch area in square feet\n","\n","3SsnPorch: Three season porch area in square feet\n","\n","ScreenPorch: Screen porch area in square feet\n","\n","PoolArea: Pool area in square feet\n","\n","PoolQC: Pool quality\n","\n","       Ex\tExcellent\n","       Gd\tGood\n","       TA\tAverage/Typical\n","       Fa\tFair\n","       NA\tNo Pool\n","\n","Fence: Fence quality\n","\n","       GdPrv\tGood Privacy\n","       MnPrv\tMinimum Privacy\n","       GdWo\tGood Wood\n","       MnWw\tMinimum Wood/Wire\n","       NA\tNo Fence\n","\n","MiscFeature: Miscellaneous feature not covered in other categories\n","\n","       Elev\tElevator\n","       Gar2\t2nd Garage (if not described in garage section)\n","       Othr\tOther\n","       Shed\tShed (over 100 SF)\n","       TenC\tTennis Court\n","       NA\tNone\n","\n","MiscVal: $Value of miscellaneous feature\n","\n","MoSold: Month Sold (MM)\n","\n","YrSold: Year Sold (YYYY)\n","\n","SaleType: Type of sale\n","\n","       WD \tWarranty Deed - Conventional\n","       CWD\tWarranty Deed - Cash\n","       VWD\tWarranty Deed - VA Loan\n","       New\tHome just constructed and sold\n","       COD\tCourt Officer Deed/Estate\n","       Con\tContract 15% Down payment regular terms\n","       ConLw\tContract Low Down payment and low interest\n","       ConLI\tContract Low Interest\n","       ConLD\tContract Low Down\n","       Oth\tOther\n","\n","SaleCondition: Condition of sale\n","\n","       Normal\tNormal Sale\n","       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n","       AdjLand\tAdjoining Land Purchase\n","       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\n","       Family\tSale between family members\n","       Partial\tHome was not completed when last assessed (associated with New Homes)\n"],"metadata":{"id":"VRgkw58Y-l8Y"}},{"cell_type":"markdown","source":["# Classification, choosing model\n","\n"],"metadata":{"id":"3M3MkHlgTWbw"}},{"cell_type":"markdown","source":["1. Data Preprocessing with pipelines for numerical and categorical data.\n","2. Model Training:\n","* Decision Tree\n","* K-Nearest Neighbors (KNN)\n","* Logistic Regression\n","* Support Vector Machine (SVM)\n","* Random Forest\n","3. Hyperparameter Tuning using GridSearchCV.\n","4. Model Comparison in a summarized table.\n","5. Confusion Matrix Visualization for the best-performing model."],"metadata":{"id":"ar-6na_nBwN3"}},{"cell_type":"code","source":[],"metadata":{"id":"_Lgzj5r-WkgX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Simplified for faster computing"],"metadata":{"id":"NFfTf9_7WlBa"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import make_pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay\n","\n","# Define target and features\n","X = data.drop(columns=[\"Expensive\"])\n","y = data[\"Expensive\"]\n","\n","# Split the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n","\n","# Define numerical and categorical columns\n","X_cat = X_train.select_dtypes(exclude=\"number\").copy()\n","X_num = X_train.select_dtypes(include=\"number\").copy()\n","\n","# Create numerical and categorical pipelines\n","numeric_pipe = make_pipeline(SimpleImputer(strategy=\"mean\"), StandardScaler())\n","categoric_pipe = make_pipeline(\n","    SimpleImputer(strategy=\"constant\", fill_value=\"N_A\"),\n","    OneHotEncoder(handle_unknown=\"ignore\")\n",")\n","\n","# Combine preprocessors\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        (\"num_pipe\", numeric_pipe, X_num.columns),\n","        (\"cat_pipe\", categoric_pipe, X_cat.columns),\n","    ]\n",")\n","\n","# Initialize a dictionary to store model scores\n","model_scores = {}\n","\n","# 1. Decision Tree\n","full_pipeline = make_pipeline(preprocessor, DecisionTreeClassifier(random_state=123))\n","param_grid = {\n","    \"decisiontreeclassifier__max_depth\": range(3, 10, 2),\n","    \"decisiontreeclassifier__min_samples_leaf\": [5, 10],\n","}\n","search = GridSearchCV(full_pipeline, param_grid, cv=3, verbose=1)\n","search.fit(X_train, y_train)\n","model_scores[\"Decision Tree\"] = {\n","    \"Best Cross-Validation Accuracy\": search.best_score_,\n","    \"Test Accuracy\": accuracy_score(search.predict(X_test), y_test)\n","}\n","\n","# 2. KNN\n","knn_pipeline = make_pipeline(preprocessor, KNeighborsClassifier())\n","knn_param_grid = {\n","    \"kneighborsclassifier__n_neighbors\": [3, 5, 7],\n","    \"kneighborsclassifier__weights\": [\"uniform\"],\n","    \"kneighborsclassifier__metric\": [\"euclidean\"],\n","}\n","knn_search = GridSearchCV(knn_pipeline, knn_param_grid, cv=3, verbose=1)\n","knn_search.fit(X_train, y_train)\n","model_scores[\"KNN\"] = {\n","    \"Best Cross-Validation Accuracy\": knn_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(knn_search.predict(X_test), y_test)\n","}\n","\n","# 3. Logistic Regression\n","logistic_pipeline = make_pipeline(preprocessor, LogisticRegression(max_iter=2000))\n","logistic_param_grid = {\n","    \"logisticregression__C\": [1, 10],\n","    \"logisticregression__solver\": [\"liblinear\"],\n","}\n","logistic_search = GridSearchCV(logistic_pipeline, logistic_param_grid, cv=3, verbose=1)\n","logistic_search.fit(X_train, y_train)\n","model_scores[\"Logistic Regression\"] = {\n","    \"Best Cross-Validation Accuracy\": logistic_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(logistic_search.predict(X_test), y_test)\n","}\n","\n","# 4. Support Vector Machine\n","svm_pipeline = make_pipeline(preprocessor, SVC())\n","svm_param_grid = {\n","    \"svc__C\": [1, 10],\n","    \"svc__kernel\": [\"linear\"],\n","}\n","svm_search = GridSearchCV(svm_pipeline, svm_param_grid, cv=3, verbose=1)\n","svm_search.fit(X_train, y_train)\n","model_scores[\"Support Vector Machine\"] = {\n","    \"Best Cross-Validation Accuracy\": svm_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(svm_search.predict(X_test), y_test)\n","}\n","\n","# 5. Random Forest\n","rf_pipeline = make_pipeline(preprocessor, RandomForestClassifier(random_state=123))\n","rf_param_grid = {\n","    \"randomforestclassifier__n_estimators\": [50],\n","    \"randomforestclassifier__max_depth\": [10],\n","    \"randomforestclassifier__min_samples_split\": [5],\n","}\n","rf_search = GridSearchCV(rf_pipeline, rf_param_grid, cv=3, verbose=1)\n","rf_search.fit(X_train, y_train)\n","model_scores[\"Random Forest\"] = {\n","    \"Best Cross-Validation Accuracy\": rf_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(rf_search.predict(X_test), y_test)\n","}\n","\n","# Display results\n","comparison_df = pd.DataFrame(model_scores).T\n","print(comparison_df)\n","\n","# Plot Confusion Matrix for the best-performing model\n","ConfusionMatrixDisplay.from_estimator(rf_search, X_test, y_test, display_labels=[\"Not Expensive\", \"Expensive\"]).plot();\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"bZ27UHHJBNg0","executionInfo":{"status":"ok","timestamp":1733216581185,"user_tz":-60,"elapsed":6598,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"3fbc69f0-fdd9-4be2-9ab5-dde23c784f0b"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 8 candidates, totalling 24 fits\n","Fitting 3 folds for each of 3 candidates, totalling 9 fits\n","Fitting 3 folds for each of 2 candidates, totalling 6 fits\n","Fitting 3 folds for each of 2 candidates, totalling 6 fits\n","Fitting 3 folds for each of 1 candidates, totalling 3 fits\n","                        Best Cross-Validation Accuracy  Test Accuracy\n","Decision Tree                                 0.931521       0.928082\n","KNN                                           0.930655       0.965753\n","Logistic Regression                           0.941788       0.962329\n","Support Vector Machine                        0.928939       0.941781\n","Random Forest                                 0.941790       0.962329\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"03aiQEiA__Rr"}},{"cell_type":"markdown","source":["## More complex, slower computing"],"metadata":{"id":"2p3PhbL8Wt5Y"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import make_pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay\n","\n","# Define target and features\n","X = data.drop(columns=[\"Expensive\"])\n","y = data[\"Expensive\"]\n","\n","# Split the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n","\n","# Define numerical and categorical columns\n","X_cat = X_train.select_dtypes(exclude=\"number\").copy()\n","X_num = X_train.select_dtypes(include=\"number\").copy()\n","\n","# Create numerical and categorical pipelines\n","numeric_pipe = make_pipeline(SimpleImputer(strategy=\"mean\"), StandardScaler())\n","categoric_pipe = make_pipeline(\n","    SimpleImputer(strategy=\"constant\", fill_value=\"N_A\"),\n","    OneHotEncoder(handle_unknown=\"ignore\")\n",")\n","\n","# Combine preprocessors\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        (\"num_pipe\", numeric_pipe, X_num.columns),\n","        (\"cat_pipe\", categoric_pipe, X_cat.columns),\n","    ]\n",")\n","\n","# Initialize a dictionary to store model scores\n","model_scores = {}\n","\n","# 1. Decision Tree\n","full_pipeline = make_pipeline(preprocessor, DecisionTreeClassifier(random_state=123))\n","param_grid = {\n","    \"decisiontreeclassifier__max_depth\": range(3, 15, 2),  # Increased depth range\n","    \"decisiontreeclassifier__min_samples_leaf\": [3, 5, 10],  # Added a smaller value\n","}\n","search = GridSearchCV(full_pipeline, param_grid, cv=3, verbose=1)\n","search.fit(X_train, y_train)\n","model_scores[\"Decision Tree\"] = {\n","    \"Best Cross-Validation Accuracy\": search.best_score_,\n","    \"Test Accuracy\": accuracy_score(search.predict(X_test), y_test)\n","}\n","\n","# 2. KNN\n","knn_param_grid = {\n","    \"kneighborsclassifier__n_neighbors\": range(3, 15, 2),  # Larger range\n","    \"kneighborsclassifier__weights\": [\"uniform\", \"distance\"],  # Added `distance`\n","    \"kneighborsclassifier__metric\": [\"euclidean\", \"manhattan\"],  # Added Manhattan\n","}\n","\n","knn_search = GridSearchCV(knn_pipeline, knn_param_grid, cv=3, verbose=1)\n","knn_search.fit(X_train, y_train)\n","model_scores[\"KNN\"] = {\n","    \"Best Cross-Validation Accuracy\": knn_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(knn_search.predict(X_test), y_test)\n","}\n","\n","# 3. Logistic Regression\n","logistic_pipeline = make_pipeline(preprocessor, LogisticRegression(max_iter=2000))\n","logistic_param_grid = {\n","    \"logisticregression__C\": [0.1, 1, 10, 100],  # Wider range for regularization\n","    \"logisticregression__solver\": [\"liblinear\", \"lbfgs\", \"saga\"],  # Added `saga`\n","}\n","logistic_search = GridSearchCV(logistic_pipeline, logistic_param_grid, cv=3, verbose=1)\n","logistic_search.fit(X_train, y_train)\n","model_scores[\"Logistic Regression\"] = {\n","    \"Best Cross-Validation Accuracy\": logistic_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(logistic_search.predict(X_test), y_test)\n","}\n","\n","# 4. Support Vector Machine\n","svm_param_grid = {\n","    \"svc__C\": [0.1, 1, 10, 100],  # Wider range for C\n","    \"svc__kernel\": [\"linear\", \"rbf\"],  # Added RBF kernel\n","    \"svc__gamma\": [\"scale\", \"auto\"],  # Gamma for RBF kernel\n","}\n","svm_search = GridSearchCV(svm_pipeline, svm_param_grid, cv=3, verbose=1)\n","svm_search.fit(X_train, y_train)\n","model_scores[\"Support Vector Machine\"] = {\n","    \"Best Cross-Validation Accuracy\": svm_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(svm_search.predict(X_test), y_test)\n","}\n","\n","# 5. Random Forest\n","rf_pipeline = make_pipeline(preprocessor, RandomForestClassifier(random_state=123))\n","rf_param_grid = {\n","    \"randomforestclassifier__n_estimators\": [50, 100, 200],  # More estimators\n","    \"randomforestclassifier__max_depth\": [None, 10, 20],  # Deeper trees\n","    \"randomforestclassifier__min_samples_split\": [2, 5, 10],  # Wider range\n","}\n","rf_search = GridSearchCV(rf_pipeline, rf_param_grid, cv=3, verbose=1)\n","rf_search.fit(X_train, y_train)\n","model_scores[\"Random Forest\"] = {\n","    \"Best Cross-Validation Accuracy\": rf_search.best_score_,\n","    \"Test Accuracy\": accuracy_score(rf_search.predict(X_test), y_test)\n","}\n","\n","# Display results\n","comparison_df = pd.DataFrame(model_scores).T\n","print(comparison_df)\n","\n","# Plot Confusion Matrix for the best-performing model\n","ConfusionMatrixDisplay.from_estimator(rf_search, X_test, y_test, display_labels=[\"Not Expensive\", \"Expensive\"]).plot();\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"RixQp5ghXdsj","executionInfo":{"status":"ok","timestamp":1733216675498,"user_tz":-60,"elapsed":85357,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"4f5ae388-fca4-4278-bf5c-12b36ef6f2af"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 18 candidates, totalling 54 fits\n","Fitting 3 folds for each of 24 candidates, totalling 72 fits\n","Fitting 3 folds for each of 12 candidates, totalling 36 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:349: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:349: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:349: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:349: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:349: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:349: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 16 candidates, totalling 48 fits\n","Fitting 3 folds for each of 27 candidates, totalling 81 fits\n","                        Best Cross-Validation Accuracy  Test Accuracy\n","Decision Tree                                 0.931521       0.928082\n","KNN                                           0.932371       0.952055\n","Logistic Regression                           0.942641       0.965753\n","Support Vector Machine                        0.946073       0.969178\n","Random Forest                                 0.949498       0.958904\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"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Wrdurd27d2vAgAGOytOFBAQEKCwszGn4+Z3+gU5KSlJERIQOH/7zL/8OHTqoTZs2sttPt2hsNpsmT56s9u3by9fXVzVr1tSnn37q9Bx79uxR165dFRwcrJCQEHXs2FG7du1y7E9ISFCnTp00btw4hYeHq1KlSurbt6/y8vIcx7z99tu69tpr5ePjo9DQUN17771Or/nJJ5+UJD377LNq1qxZodfZqFEjp2/Xnjp1qqKiouTj46N69eo5fTs3Li27XXpnxNW67qYTqlEv27H93ZFXq/6NJ/WPuGMXOPtPX3xUSW3u+V3evm56qQzKpBr1Tmne9s1asGuT+r28V0k9aihjO62/K8WZNVWuDndU6lF7enrqpZde0ptvvqm9e/ee85j169era9euuv/++7V582aNHDlSw4YNU0pKiqTTrbCqVasqKSlJBw4c0IEDBy46nueee041atRQz549JUmTJk3SypUrNW3aNHl4/Pl2DRs2TF26dNH333+v+Ph43X///dq6daskKS8vT7GxsQoICNCyZcu0YsUK+fv7Ky4uTrm5uY45vvnmG6Wnp+ubb77RtGnTlJKS4nhN69atU79+/ZSUlKRt27Zp4cKFatmy5Tljjo+P19q1a5Wenu7Y9uOPP2rTpk168MEHJUmpqakaPny4XnzxRW3dulUvvfSShg0bpmnTpp1zzpycHB07dsxpwDpvPVtVu3/y1dDJux3bVn0RqI0rAvRY0r4izbFlXQVlbPdRHK0/uJm96d56vF0d9etwrRZMr6xBb2So+rXZf38icJkr9aRKku655x41btxYI0aMOOf+1157TW3bttWwYcNUp04dJSQkKDExUa+++qqk060wT09PpwrUhQwZMkT+/v5OY9myZZJOJ3n//ve/tXjxYj3zzDMaPHiwJk2apOrVna+4+uc//6mePXuqTp06Gj16tG688Ua9+eabkqRZs2bJbrdr6tSpatCggaKiopScnKyMjAylpaU55qhYsaLeeust1atXT3feeac6dOigxYsXS5IyMjLk5+enO++8U5GRkWrSpIn69et3ztdz3XXXqVGjRpoxY4ZjW2pqqpo1a6batWtLkkaMGKHx48erc+fOuuaaa9S5c2cNGDBA77777jnnHDNmjIKCghyjWrVqF3xPUXRvPXu11iwK1Cuf7tBVEX9WJjeuCNCBXV7qXK+B2ldr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6FcNe6alwsJPqGXrPdqwLkxHj3qrcuU/9M/7f1Jurqe+XRtW2qHDFVZcveemTbQymVRdSHp6ugYMGKApU6Zo1qxZ6t69u7766it5ePy5/GzNmjVO56xevVrXXnutPD091aRJExUUFOjQoUNq0aKFS7E0adJETZo00dChQxUdHa0ZM2acM6mSTlerUlNTVbVqVXl4eKhDhw6OfTfccIO2bNlywUQSlw+/gAI9PHiPKofl6vjRclq+METTxldVAYt34WaCgrP11JC1CgnJ1smT5bVzZ5CGPdNS320IVUilU7ru+t/UsfN2+fvn6sjvPvph81V6qt9tOnrEtdYRUFrKZFKVk5OjzMxMp23lypVTxYoV9dBDDyk2NlYPP/yw4uLi1KBBA40fP16DBw92HJuRkaGBAweqd+/e2rBhg958802NHz9eklSnTh3Fx8erW7duGj9+vJo0aaJff/1VixcvVsOGDZ2SnfPZuXOn3nvvPd19992KiIjQtm3btH37dnXr1u2858THx2vkyJF68cUXde+99zq17oYMGaLmzZsrMTFRPXv2lJ+fn7Zs2aJFixbprbfeKu7bhxK27PNKWvZ54UvOAXfzxvibzrsv67CvRjzn2h+euDzR/itjFi5cWGh9Ut26dfXggw9q9+7dWrBggaTT65zee+89PfDAA7r99tvVqFEjSVK3bt106tQp3XzzzfL09FT//v316KOPOuZKTk7WCy+8oKeeekr79u1T5cqV1bx5c915551Fiq9ChQr66aefNG3aNB0+fFjh4eHq27evevfufd5zateurZtvvllr167V66+/7rSvYcOGWrJkiZ577jm1aNFCxhjVqlVL9913X5HiAQCgyMrw19SUuav/XNW6dWs1bty4UOJypTtzVQdX/+FKxtV/uJJdqqv/ouOSLLn6b9XC4Vz9BwAAyi7afwAAAFawm9PD1TncEElVMZ39dTMAAOAvyvCaKq7RBgAAsACVKgAAYBmbLFhTZUkklx5JFQAAsE4ZvqM67T8AAAALUKkCAACW4ZYKAAAAVuDqPwAAALiCpAoAAFjGZowlozhGjhwpm83mNOrVq+fYn52drb59+6pSpUry9/dXly5ddPDgQatfOkkVAACwkN2iUUzXXXedDhw44BjLly937BswYIDmz5+vTz75REuWLNH+/fvVuXPni3+N58GaKgAA4PbK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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#  train model on real data!"],"metadata":{"id":"u0MmEqAow4PX"}},{"cell_type":"markdown","source":[" ## Support Vector Machine"],"metadata":{"id":"xG8S4rBm9ETH"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import make_pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay\n","\n","# Load the data\n","url = \"https://drive.google.com/file/d/1P6-fOxODMticjS9WMKbUAEpwOrhbtRHn/view?usp=drive_link\"\n","path = \"https://drive.google.com/uc?export=download&id=\"+url.split('/')[-2]\n","data = pd.read_csv(path, index_col=\"Id\")\n","\n","# Define target and features\n","X = data.drop(columns=[\"Expensive\"])\n","y = data[\"Expensive\"]\n","\n","# Split the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n","\n","# Define numerical and categorical columns\n","X_cat = X_train.select_dtypes(exclude=\"number\").copy()\n","X_num = X_train.select_dtypes(include=\"number\").copy()\n","\n","# Create numerical and categorical pipelines\n","numeric_pipe = make_pipeline(SimpleImputer(strategy=\"mean\"), StandardScaler())\n","categoric_pipe = make_pipeline(\n","    SimpleImputer(strategy=\"constant\", fill_value=\"N_A\"),\n","    OneHotEncoder(handle_unknown=\"ignore\")\n",")\n","\n","# Combine preprocessors\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        (\"num_pipe\", numeric_pipe, X_num.columns),\n","        (\"cat_pipe\", categoric_pipe, X_cat.columns),\n","    ]\n",")\n","\n","# SVM pipeline\n","svm_pipeline = make_pipeline(preprocessor, SVC())\n","\n","# Define hyperparameter grid for SVM\n","svm_param_grid = {\n","    \"svc__C\": [0.1, 1, 10, 100],  # Wider range for C\n","    \"svc__kernel\": [\"linear\", \"rbf\"],  # Added RBF kernel\n","    \"svc__gamma\": [\"scale\", \"auto\"],  # Gamma for RBF kernel\n","}\n","\n","# GridSearchCV for SVM\n","svm_search = GridSearchCV(svm_pipeline, svm_param_grid, cv=3, verbose=1)\n","svm_search.fit(X_train, y_train)\n","\n","# Evaluate the model\n","best_cv_accuracy = svm_search.best_score_\n","test_accuracy = accuracy_score(svm_search.predict(X_test), y_test)\n","\n","# Display results\n","print(\"Best Cross-Validation Accuracy:\", best_cv_accuracy)\n","print(\"Test Accuracy:\", test_accuracy)\n","\n","# Plot Confusion Matrix\n","ConfusionMatrixDisplay.from_estimator(\n","    svm_search,\n","    X_test,\n","    y_test,\n","    display_labels=[\"Not Expensive\", \"Expensive\"]\n",").plot();\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":933},"id":"G2qMKLVw0ghv","executionInfo":{"status":"ok","timestamp":1733218591993,"user_tz":-60,"elapsed":10027,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"3b98127c-a0c0-46ff-e3b9-ae27433a689d"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 16 candidates, totalling 48 fits\n","Best Cross-Validation Accuracy: 0.9452156526706655\n","Test Accuracy: 0.9691780821917808\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = svm_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions2.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WrthMfZHwCEC","executionInfo":{"status":"ok","timestamp":1733219146709,"user_tz":-60,"elapsed":2788,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"222d236d-e3a2-49ff-d838-061a2448b2bd"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions.csv\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"U6vgrcil60i4","executionInfo":{"status":"ok","timestamp":1733219304326,"user_tz":-60,"elapsed":175,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"421a1132-2de4-4f8b-dcf7-07e002499181"},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_63a69259-8164-402d-aa64-030d3a35dfc8\", \"classification_predictions.csv\", 10226)"]},"metadata":{}}]},{"cell_type":"markdown","source":["## KNN"],"metadata":{"id":"FwySzqWKBhGK"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.pipeline import make_pipeline\n","\n","# Define the KNN pipeline\n","knn_pipeline = make_pipeline(preprocessor, KNeighborsClassifier())\n","\n","# Expanded hyperparameter grid for KNN\n","knn_param_grid = {\n","    \"kneighborsclassifier__n_neighbors\": [3, 5, 7, 9, 11],  # Larger range for neighbors\n","    \"kneighborsclassifier__weights\": [\"uniform\", \"distance\"],  # Added `distance`\n","    \"kneighborsclassifier__metric\": [\"euclidean\", \"manhattan\", \"chebyshev\", \"minkowski\"],  # Additional distance metrics\n","    \"kneighborsclassifier__p\": [1, 2]  # Specific for Minkowski: p=1 (Manhattan), p=2 (Euclidean)\n","}\n","\n","# GridSearchCV for KNN\n","knn_search = GridSearchCV(\n","    knn_pipeline,\n","    param_grid=knn_param_grid,\n","    cv=5,  # 5-fold cross-validation\n","    verbose=1,  # Display progress\n","    scoring=\"accuracy\"  # Optimize for accuracy\n",")\n","\n","# Train the model\n","knn_search.fit(X_train, y_train)\n","\n","# Evaluate the model\n","best_cv_accuracy = knn_search.best_score_\n","test_accuracy = accuracy_score(knn_search.predict(X_test), y_test)\n","\n","# Output results\n","print(\"Best Cross-Validation Accuracy:\", best_cv_accuracy)\n","print(\"Test Accuracy:\", test_accuracy)\n","print(\"Best Parameters:\", knn_search.best_params_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8DzA1-JtBoB3","executionInfo":{"status":"ok","timestamp":1733225842311,"user_tz":-60,"elapsed":53692,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"eaadb0b0-046f-4a65-9626-f34296a51e88"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 80 candidates, totalling 400 fits\n","Best Cross-Validation Accuracy: 0.9332086130369392\n","Test Accuracy: 0.958904109589041\n","Best Parameters: {'kneighborsclassifier__metric': 'manhattan', 'kneighborsclassifier__n_neighbors': 3, 'kneighborsclassifier__p': 1, 'kneighborsclassifier__weights': 'uniform'}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:540: FitFailedWarning: \n","100 fits failed out of a total of 400.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","100 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\", line 473, in fit\n","    self._final_estimator.fit(Xt, y, **last_step_params[\"fit\"])\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py\", line 238, in fit\n","    return self._fit(X, y)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_base.py\", line 590, in _fit\n","    raise ValueError(\n","ValueError: Metric 'chebyshev' not valid for sparse input. Use sorted(sklearn.neighbors.VALID_METRICS_SPARSE['brute']) to get valid options. Metric can also be a callable function.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:1103: UserWarning: One or more of the test scores are non-finite: [0.92293019 0.92293019 0.92293019 0.92293019 0.92121346 0.92121346\n"," 0.92121346 0.92121346 0.926349   0.926349   0.926349   0.926349\n"," 0.92549063 0.92549063 0.92549063 0.92549063 0.926349   0.926349\n"," 0.926349   0.926349   0.93320861 0.93320861 0.93320861 0.93320861\n"," 0.92892044 0.9272037  0.92892044 0.9272037  0.93320494 0.93234658\n"," 0.93320494 0.93234658 0.93149187 0.93063351 0.93149187 0.93063351\n"," 0.93148821 0.93234658 0.93148821 0.93234658        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n","        nan        nan        nan        nan        nan        nan\n"," 0.93320861 0.93320861 0.92293019 0.92293019 0.92892044 0.9272037\n"," 0.92121346 0.92121346 0.93320494 0.93234658 0.926349   0.926349\n"," 0.93149187 0.93063351 0.92549063 0.92549063 0.93148821 0.93234658\n"," 0.926349   0.926349  ]\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = knn_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions4.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RrLoTAMeMAZo","executionInfo":{"status":"ok","timestamp":1733225846174,"user_tz":-60,"elapsed":3369,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"16d4688a-0fc0-45a5-d69a-653f992ccbc0"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions4.csv\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions4.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"QxFdJbdEMiaS","executionInfo":{"status":"ok","timestamp":1733225895584,"user_tz":-60,"elapsed":191,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"c1895a00-388d-46bd-df7d-a18a5dd53869"},"execution_count":55,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_9563a2d9-eecb-4e3c-a7ee-9b56cb0f175a\", \"classification_predictions4.csv\", 10226)"]},"metadata":{}}]},{"cell_type":"markdown","source":["## SVM 2\n"],"metadata":{"id":"NVHK4iSFUW9x"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.pipeline import make_pipeline\n","\n","# Define the pipeline\n","svm_pipeline = make_pipeline(preprocessor, SVC(random_state=123))\n","\n","# Expanded hyperparameter grid\n","svm_param_grid = {\n","    \"svc__C\": [0.01, 0.1, 1, 10, 100, 1000],\n","    \"svc__kernel\": [\"linear\", \"rbf\", \"poly\", \"sigmoid\"],\n","    \"svc__gamma\": [\"scale\", \"auto\", 0.001, 0.01, 0.1, 1],\n","    \"svc__degree\": [2, 3, 4],  # Only for 'poly' kernel\n","    \"svc__coef0\": [0.0, 0.1, 0.5, 1.0]  # For 'poly' and 'sigmoid'\n","}\n","\n","# GridSearchCV for SVM\n","svm_search = GridSearchCV(\n","    svm_pipeline,\n","    param_grid=svm_param_grid,\n","    cv=5,\n","    verbose=1,\n","    scoring=\"accuracy\"\n",")\n","\n","# Train the model\n","svm_search.fit(X_train, y_train)\n","\n","# Evaluate the model\n","best_cv_accuracy = svm_search.best_score_\n","test_accuracy = accuracy_score(svm_search.predict(X_test), y_test)\n","\n","print(\"Best Cross-Validation Accuracy:\", best_cv_accuracy)\n","print(\"Test Accuracy:\", test_accuracy)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E_5VsalFUYaM","executionInfo":{"status":"ok","timestamp":1733227491561,"user_tz":-60,"elapsed":1513071,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"f2747b85-b1fa-4b4a-c868-d55d017f9c52"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 1728 candidates, totalling 8640 fits\n","Best Cross-Validation Accuracy: 0.9503356443270606\n","Test Accuracy: 0.9623287671232876\n"]}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = svm_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions5.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"29DqjGegUcgt","executionInfo":{"status":"ok","timestamp":1733227498731,"user_tz":-60,"elapsed":2325,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"7b863dd5-17ba-49e0-aad1-f7591bf5ad23"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions5.csv\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions5.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"HCDMLLTFUpqC","executionInfo":{"status":"ok","timestamp":1733227503668,"user_tz":-60,"elapsed":206,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"374bcbaf-e98a-48ae-f632-f36ae7343457"},"execution_count":58,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_e3f28110-7493-4a24-bf8f-fe78af753aa0\", \"classification_predictions5.csv\", 10226)"]},"metadata":{}}]},{"cell_type":"markdown","source":["## SVM3 AND RANDOM FOREST"],"metadata":{"id":"Nt2uD9Jj0L7V"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.pipeline import make_pipeline\n","from sklearn.metrics import accuracy_score\n","import pandas as pd\n","\n","# Define pipelines for SVM and Random Forest\n","svm_pipeline = make_pipeline(preprocessor, SVC(random_state=123))\n","rf_pipeline = make_pipeline(preprocessor, RandomForestClassifier(random_state=123))\n","\n","# Expanded hyperparameter grid for SVM\n","svm_param_grid = {\n","    \"svc__C\": [0.1, 1, 10, 100],\n","    \"svc__kernel\": [\"linear\", \"rbf\"],\n","    \"svc__gamma\": [\"scale\", 0.01, 0.1, 1]\n","}\n","\n","# Hyperparameter grid for Random Forest\n","rf_param_grid = {\n","    \"randomforestclassifier__n_estimators\": [50, 100, 200],\n","    \"randomforestclassifier__max_depth\": [None, 10, 20],\n","    \"randomforestclassifier__min_samples_split\": [2, 5],\n","    \"randomforestclassifier__min_samples_leaf\": [1, 2, 4]\n","}\n","\n","# GridSearchCV for SVM\n","print(\"Tuning SVM...\")\n","svm_search = GridSearchCV(\n","    svm_pipeline,\n","    param_grid=svm_param_grid,\n","    cv=5,\n","    verbose=1,\n","    scoring=\"accuracy\"\n",")\n","svm_search.fit(X_train, y_train)\n","\n","# GridSearchCV for Random Forest\n","print(\"Tuning Random Forest...\")\n","rf_search = GridSearchCV(\n","    rf_pipeline,\n","    param_grid=rf_param_grid,\n","    cv=5,\n","    verbose=1,\n","    scoring=\"accuracy\"\n",")\n","rf_search.fit(X_train, y_train)\n","\n","# Evaluate both models\n","svm_test_accuracy = accuracy_score(svm_search.predict(X_test), y_test)\n","rf_test_accuracy = accuracy_score(rf_search.predict(X_test), y_test)\n","\n","# Print results\n","print(\"SVM Best Cross-Validation Accuracy:\", svm_search.best_score_)\n","print(\"SVM Test Accuracy:\", svm_test_accuracy)\n","print(\"SVM Best Parameters:\", svm_search.best_params_)\n","\n","print(\"Random Forest Best Cross-Validation Accuracy:\", rf_search.best_score_)\n","print(\"Random Forest Test Accuracy:\", rf_test_accuracy)\n","print(\"Random Forest Best Parameters:\", rf_search.best_params_)\n","\n","# Compare and select the best model\n","if svm_test_accuracy > rf_test_accuracy:\n","    best_model = svm_search.best_estimator_\n","    print(\"SVM is selected as the best model.\")\n","else:\n","    best_model = rf_search.best_estimator_\n","    print(\"Random Forest is selected as the best model.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nLBeEokR0OBt","executionInfo":{"status":"ok","timestamp":1733234693405,"user_tz":-60,"elapsed":217206,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"6b4b3350-9731-4fc4-e200-0644d0d9901f"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Tuning SVM...\n","Fitting 5 folds for each of 32 candidates, totalling 160 fits\n","Tuning Random Forest...\n","Fitting 5 folds for each of 54 candidates, totalling 270 fits\n","SVM Best Cross-Validation Accuracy: 0.9417812992920289\n","SVM Test Accuracy: 0.9623287671232876\n","SVM Best Parameters: {'svc__C': 1, 'svc__gamma': 0.01, 'svc__kernel': 'rbf'}\n","Random Forest Best Cross-Validation Accuracy: 0.9477678735189464\n","Random Forest Test Accuracy: 0.9623287671232876\n","Random Forest Best Parameters: {'randomforestclassifier__max_depth': 10, 'randomforestclassifier__min_samples_leaf': 1, 'randomforestclassifier__min_samples_split': 5, 'randomforestclassifier__n_estimators': 200}\n","Random Forest is selected as the best model.\n"]}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = svm_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions6.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3J4iKqLo1CKl","executionInfo":{"status":"ok","timestamp":1733234707695,"user_tz":-60,"elapsed":2877,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"6ea63d27-d3de-4ca6-ff26-2706cefcb5cc"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions6.csv\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions6.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"k22xzCV21YQW","executionInfo":{"status":"ok","timestamp":1733234711613,"user_tz":-60,"elapsed":181,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"2e4b251a-4fde-49d7-a398-61aec991bfd5"},"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_76d70f81-b92c-49d6-9a1a-69dd547a0f2f\", \"classification_predictions6.csv\", 10226)"]},"metadata":{}}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = rf_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions7.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0iCnOq3L1G0T","executionInfo":{"status":"ok","timestamp":1733234723296,"user_tz":-60,"elapsed":2510,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"428bc8fe-b3f3-4c9e-dfd3-fc82346914a8"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions7.csv\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions7.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"bJNoqfxA1a7m","executionInfo":{"status":"ok","timestamp":1733234727265,"user_tz":-60,"elapsed":186,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"04dc43c0-8d71-49b1-fe94-597ecb1ff7f6"},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_054bf0f7-85a1-4122-8504-7f169c527044\", \"classification_predictions7.csv\", 10226)"]},"metadata":{}}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = svm_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions8.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"id":"VQBEJUyq22-O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = rf_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions9.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gh1Ah-V03OK_","executionInfo":{"status":"ok","timestamp":1733235200205,"user_tz":-60,"elapsed":2413,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"0cf5ebf6-e303-4c64-ab8e-0456c37e8ac3"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions9.csv\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions9.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"udp4rJgO3R-1","executionInfo":{"status":"ok","timestamp":1733235204469,"user_tz":-60,"elapsed":179,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"a8b2936c-5926-4ad4-8280-107641ded62a"},"execution_count":66,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_39187979-a3c5-4bf4-b8b7-04b681cf1994\", \"classification_predictions9.csv\", 10226)"]},"metadata":{}}]},{"cell_type":"markdown","source":["## Random Forest"],"metadata":{"id":"S9N8YPXk9O-m"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import make_pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay\n","\n","# Load the data\n","url = \"https://drive.google.com/file/d/1P6-fOxODMticjS9WMKbUAEpwOrhbtRHn/view?usp=drive_link\"\n","path = \"https://drive.google.com/uc?export=download&id=\"+url.split('/')[-2]\n","data = pd.read_csv(path, index_col=\"Id\")\n","\n","# Define target and features\n","X = data.drop(columns=[\"Expensive\"])\n","y = data[\"Expensive\"]\n","\n","# Split the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n","\n","# Define numerical and categorical columns\n","X_cat = X_train.select_dtypes(exclude=\"number\").copy()\n","X_num = X_train.select_dtypes(include=\"number\").copy()\n","\n","# Create numerical and categorical pipelines\n","numeric_pipe = make_pipeline(SimpleImputer(strategy=\"mean\"), StandardScaler())\n","categoric_pipe = make_pipeline(\n","    SimpleImputer(strategy=\"constant\", fill_value=\"N_A\"),\n","    OneHotEncoder(handle_unknown=\"ignore\")\n",")\n","\n","# Combine preprocessors\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        (\"num_pipe\", numeric_pipe, X_num.columns),\n","        (\"cat_pipe\", categoric_pipe, X_cat.columns),\n","    ]\n",")\n","\n","# Random Forest pipeline\n","rf_pipeline = make_pipeline(preprocessor, RandomForestClassifier(random_state=123))\n","\n","# Define hyperparameter grid for Random Forest\n","rf_param_grid = {\n","    \"randomforestclassifier__n_estimators\": [50, 100, 200],  # Number of trees\n","    \"randomforestclassifier__max_depth\": [None, 10, 20],  # Depth of trees\n","    \"randomforestclassifier__min_samples_split\": [2, 5, 10],  # Minimum samples to split\n","    \"randomforestclassifier__min_samples_leaf\": [1, 3, 5]  # Minimum samples per leaf\n","}\n","\n","# GridSearchCV for Random Forest\n","rf_search = GridSearchCV(rf_pipeline, rf_param_grid, cv=3, verbose=1, scoring=\"accuracy\")\n","rf_search.fit(X_train, y_train)\n","\n","# Evaluate the model\n","best_cv_accuracy = rf_search.best_score_\n","test_accuracy = accuracy_score(rf_search.predict(X_test), y_test)\n","\n","# Display results\n","print(\"Best Cross-Validation Accuracy:\", best_cv_accuracy)\n","print(\"Test Accuracy:\", test_accuracy)\n","\n","# Plot Confusion Matrix\n","ConfusionMatrixDisplay.from_estimator(\n","    rf_search,\n","    X_test,\n","    y_test,\n","    display_labels=[\"Not Expensive\", \"Expensive\"]\n",").plot()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"puDlQYMe9Nb-","executionInfo":{"status":"ok","timestamp":1733220389314,"user_tz":-60,"elapsed":107902,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"52d8924f-fe42-47c4-8f25-d2c146791562"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 81 candidates, totalling 243 fits\n","Best Cross-Validation Accuracy: 0.9503504493221717\n","Test Accuracy: 0.9657534246575342\n"]},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7b3d8c4c3670>"]},"metadata":{},"execution_count":47},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = rf_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions2.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"thOucf8l8Yo7","executionInfo":{"status":"ok","timestamp":1733220391779,"user_tz":-60,"elapsed":2471,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"a27d9ab1-8863-4801-98e3-9b22dc39de41"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions2.csv\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"X-sFKi-C37vH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions2.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"wGgWTnx9_KQy","executionInfo":{"status":"ok","timestamp":1733220416706,"user_tz":-60,"elapsed":185,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"c0952a8e-28aa-4977-c122-38fe1937696e"},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_848571dd-3996-40c8-ac4a-97ebee279f30\", \"classification_predictions2.csv\", 10226)"]},"metadata":{}}]},{"cell_type":"markdown","source":["## SVM final"],"metadata":{"id":"20gOuuy038Ya"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","from sklearn.model_selection import GridSearchCV, StratifiedKFold\n","from sklearn.pipeline import make_pipeline\n","from sklearn.metrics import accuracy_score, classification_report\n","import pandas as pd\n","\n","# Define the pipeline\n","svm_pipeline = make_pipeline(preprocessor, SVC(random_state=123))\n","\n","# Expanded hyperparameter grid\n","svm_param_grid = {\n","    \"svc__C\": [0.01, 0.1, 1, 10, 50, 100, 500, 1000],  # Finer control over C\n","    \"svc__kernel\": [\"linear\", \"rbf\", \"poly\"],  # Removed \"sigmoid\" (less performant)\n","    \"svc__gamma\": [\"scale\", \"auto\", 0.001, 0.01, 0.1],  # Broader but reasonable range\n","    \"svc__degree\": [2, 3, 4],  # Relevant only for 'poly' kernel\n","    \"svc__coef0\": [0.0, 0.1, 0.5, 1.0],  # Fine-tune for 'poly' kernel\n","}\n","\n","# Use StratifiedKFold for better handling of class imbalances\n","cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=123)\n","\n","# GridSearchCV for SVM\n","svm_search = GridSearchCV(\n","    svm_pipeline,\n","    param_grid=svm_param_grid,\n","    cv=cv,\n","    verbose=2,  # More detailed output\n","    scoring=\"accuracy\",\n","    n_jobs=-1  # Utilize all available processors for faster execution\n",")\n","\n","# Train the model\n","print(\"Tuning SVM...\")\n","svm_search.fit(X_train, y_train)\n","\n","# Evaluate the model\n","best_cv_accuracy = svm_search.best_score_\n","test_accuracy = accuracy_score(svm_search.predict(X_test), y_test)\n","\n","print(\"\\n=== SVM Model Performance ===\")\n","print(\"Best Cross-Validation Accuracy:\", best_cv_accuracy)\n","print(\"Test Accuracy:\", test_accuracy)\n","print(\"Best Parameters:\", svm_search.best_params_)\n","\n","# Detailed classification report\n","y_pred = svm_search.predict(X_test)\n","print(\"\\nClassification Report on Test Data:\")\n","print(classification_report(y_test, y_pred, target_names=[\"Not Expensive\", \"Expensive\"]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3-0FJZOi4Fkg","executionInfo":{"status":"ok","timestamp":1733236457463,"user_tz":-60,"elapsed":1086015,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"bacf8b62-ee87-4b40-bd23-7c03f9864ddc"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["Tuning SVM...\n","Fitting 5 folds for each of 1440 candidates, totalling 7200 fits\n","\n","=== SVM Model Performance ===\n","Best Cross-Validation Accuracy: 0.945192766222809\n","Test Accuracy: 0.9657534246575342\n","Best Parameters: {'svc__C': 1, 'svc__coef0': 1.0, 'svc__degree': 3, 'svc__gamma': 0.01, 'svc__kernel': 'poly'}\n","\n","Classification Report on Test Data:\n","               precision    recall  f1-score   support\n","\n","Not Expensive       0.98      0.98      0.98       250\n","    Expensive       0.88      0.88      0.88        42\n","\n","     accuracy                           0.97       292\n","    macro avg       0.93      0.93      0.93       292\n"," weighted avg       0.97      0.97      0.97       292\n","\n"]}]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","\n","# Load test data (competition dataset)\n","test_url = \"https://drive.google.com/file/d/1-EylWHNidzQyM9j5LsYQpv85QtVMOXHp/view?usp=drive_link\"\n","test_path = \"https://drive.google.com/uc?export=download&id=\"+test_url.split('/')[-2]\n","test_data = pd.read_csv(test_path, index_col=\"Id\")\n","\n","\n","# Predict using the best model\n","best_model = svm_search.best_estimator_  # Best model from GridSearchCV\n","test_predictions = best_model.predict(test_data)\n","\n","# Create a DataFrame for submission\n","submission = pd.DataFrame({\n","    \"Id\": test_data.index,\n","    \"Expensive\": test_predictions\n","})\n","\n","# Save predictions to a CSV file\n","output_file = \"classification_predictions11.csv\"\n","submission.to_csv(output_file, index=False)\n","\n","print(f\"Predictions saved to {output_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o2kNIm4S4eai","executionInfo":{"status":"ok","timestamp":1733236489690,"user_tz":-60,"elapsed":2523,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"4ca803bd-1086-421d-8f1d-ce3f0a9d6991"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions saved to classification_predictions11.csv\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"classification_predictions11.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"DloQ3g1U3Bcc","executionInfo":{"status":"ok","timestamp":1733236494938,"user_tz":-60,"elapsed":199,"user":{"displayName":"Monika Kotus","userId":"10023413886646189621"}},"outputId":"b04b1423-c655-486b-d8d4-5df19d16e47b"},"execution_count":70,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_8d750132-b215-434c-9c28-dce18fddcc33\", \"classification_predictions11.csv\", 10226)"]},"metadata":{}}]}]}